"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const user_controller_1 = require("../controller/user.controller");
const auth_middleware_1 = require("../../../middleware/auth.middleware");
const validation_middleware_1 = require("../../../middleware/validation.middleware");
const user_dto_1 = require("../dto/user.dto");
const router = (0, express_1.Router)();
const userController = new user_controller_1.UserController();
router.post('/register', (0, validation_middleware_1.validateRequest)({ body: user_dto_1.createUserSchema }), userController.register);
router.post('/login', (0, validation_middleware_1.validateRequest)({ body: user_dto_1.loginUserSchema }), userController.login);
router.post('/refresh-token', userController.refreshToken);
router.get('/check-email', userController.checkEmailAvailability);
router.get('/profile', auth_middleware_1.authenticateToken, userController.getProfile);
router.put('/profile', auth_middleware_1.authenticateToken, (0, validation_middleware_1.validateRequest)({ body: user_dto_1.updateUserSchema }), userController.updateProfile);
router.post('/change-password', auth_middleware_1.authenticateToken, (0, validation_middleware_1.validateRequest)({ body: user_dto_1.changePasswordSchema }), userController.changePassword);
router.get('/', auth_middleware_1.authenticateToken, (0, auth_middleware_1.authorizeRoles)('ADMIN'), (0, validation_middleware_1.validateRequest)({ query: user_dto_1.getUsersQuerySchema }), userController.getUsers);
router.post('/create', auth_middleware_1.authenticateToken, (0, auth_middleware_1.authorizeRoles)('ADMIN'), (0, validation_middleware_1.validateRequest)({ body: user_dto_1.createUserSchema }), userController.createUser);
router.get('/:id', auth_middleware_1.authenticateToken, (0, auth_middleware_1.authorizeRoles)('ADMIN'), (0, validation_middleware_1.validateRequest)({ params: user_dto_1.userIdParamSchema }), userController.getUserById);
router.delete('/:id', auth_middleware_1.authenticateToken, (0, auth_middleware_1.authorizeRoles)('ADMIN'), (0, validation_middleware_1.validateRequest)({ params: user_dto_1.userIdParamSchema }), userController.deleteUser);
exports.default = router;
//# sourceMappingURL=user.router.js.map